;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Configure which servers can work on which jobs.
;
; Here's how it works: 
; 1) You specify an ini section with a class name of a job. 
; 2) Any job who's class name matches can run on the listed servers
; 3) Any job who's parent class' name matches can also run on the listed servers
; 
; Example:
;		[MyJob]
;		server1.example.com = <weight>
;		server2.example.com = <weight>
; 
; In the example above we're saying that server1.example.com and server2.example.com
; can handle any job who's class is MyJob and any job who's parent class is MyJob
;
; <weight> is the proportion of jobs you want routed to that server. 
;
; Example:
;		server1.example.com = 5
;		server2.example.com = 1
; 
; In this example server1.example.com will be 5 times more likely to get assigned
; a job than server2.example.com
;
; Servers that can handle all types of jobs:
; Any server listed without an ini [section] (at the top of the file without [MyJob])
; will be routed jobs of any type. So if all your servers can handle every kind of
; job then you do not have to have ANY ini [sections]
;
; Specifying ports:
;
; In php 5.3 they changed how ini files are parsed and you can no loner have the ':'
; character as part of a key. This means that server2.example.com:443 is no longer
; a valid key and causes parse_ini_file() to toss a syntax error (I blame Andrei). 
; So, if you're running PHP 5.3x you have to use the following syntax:
;	server1.example.com*443
;   OR
;	server1.example.com_port_443	
;
; If you're using PHP v 5.2.x then you can still use:
;	server1.example.com:443
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; These servers can handle all jobs
resqee.local*80 = 1
resqee22.local = 3

; This server handles jobs of class TestJob2 or direct children of TestJob2
[TestJob2]
192.168.0.1_port_443 = true
resqee.local = 1
TestJob2.server.local = 1
disabled.server.local = 0
disabled2.server.local = false